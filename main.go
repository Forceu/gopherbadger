package main

import (
	"bufio"
	"flag"
	"fmt"
	"gopherbadger/coverbadge"
	"io"
	"log"
	"os"
	"os/exec"
	"regexp"
	"strconv"
	"strings"

	"github.com/fatih/color"
)

func getCommandOutput(commandString string) chan float64 {
	cmd := exec.Command("bash", "-c", commandString)
	cmd.Stderr = os.Stderr
	stdout, err := cmd.StdoutPipe()
	if nil != err {
		log.Fatalf("Error obtaining stdout: %s", err.Error())
	}
	reader := bufio.NewReader(stdout)
	coverageFloatChannel := make(chan float64)
	go func(reader io.Reader) {
		re := regexp.MustCompile("total:\\s*\\(statements\\)?\\s*(\\d+\\.?\\d*)\\s*\\%")
		scanner := bufio.NewScanner(reader)
		for scanner.Scan() {
			lineText := scanner.Text()
			match := re.FindStringSubmatch(lineText)
			if len(match) == 2 {
				color.Green(lineText)
				//fmt.Printf("Found coverage = %s%\n", match[1])
				coverageValue, err := strconv.ParseFloat(match[1], 32)
				errCheck("Parsing coverage to float", err)
				if err == nil {
					coverageFloatChannel <- coverageValue
				}
				break
			} else {
				fmt.Println(lineText)
			}
		}
	}(reader)
	if err := cmd.Start(); nil != err {
		log.Fatalf("Error starting program: %s, %s", cmd.Path, err.Error())
	}
	cmd.Wait()
	return coverageFloatChannel
}

func main() {
	badgeOutputFlag := flag.Bool("png", true, "Boolean to decide if .png will be generated by the software")
	updateMdFilesFlag := flag.String("md", "", "A list of markdown filepaths for badge updates.")
	manualCoverageFlag := flag.Float64("manualcov", -1.0, "A manually inputted coverage float.")
	flag.Parse()
	coverageBadge := coverbadge.Badge{
		CoveragePrefix: "Go",
		Style:    "flat",
		ImageExtension: ".png",
	}
	var coverageFloat float64
	if *manualCoverageFlag == -1 {
		coverageFloat = <-getCommandOutput("go test ./... -coverprofile=coverage.out && go tool cover -func=coverage.out")
	} else {
		coverageFloat = *manualCoverageFlag
	}
	if *badgeOutputFlag == true {
		coverageBadge.DownloadBadge("coverage_badge.png", coverageFloat)
	}
	if *updateMdFilesFlag != "" {
		for _, filepath := range strings.Split(*updateMdFilesFlag, ",") {
			coverageBadge.WriteBadgeToMd(filepath, coverageFloat)
		}
	}
}
